---

### PRD 核心需求分析

1.  **区分去程和返程**：
    *   **目的**：将两个机场之间的往返航班进行视觉区分。
    *   **规则**：
        *   **主规则**：根据纬度变化定义。纬度增加（向北飞）的是“去程”，标记为红色。纬度减少（向南飞）的是“返程”，标记为蓝色。
        *   **次规则**：如果纬度相同，则根据经度变化定义。经度增加（向东飞）的是“去程”。

2.  **航线绘制样式**：
    *   **目的**：让往返航线在地图上形成一对视觉上对称的弧线。
    *   **规则**：
        *   去程航线：使用曲率为正的贝塞尔曲线绘制。
        *   返程航线：使用曲率为负的贝塞尔曲线绘制。

3.  **处理重复航线**：
    *   **目的**：避免同一航线（例如，3次“北京-上海”的飞行）在地图上完全重叠，导致无法区分。
    *   **规则**：对于完全相同的航线，每次飞行的航线曲率都应比上一次更大，从而形成一组有层次感的平行弧线。

### 细化为开发任务

为了让 AI Agent 能够准确地实现这个功能，我们可以将需求拆解为以下几个技术任务：

**任务一：数据处理 - 航线分组与属性增强**

1.  **读取航班和机场数据**：首先需要加载所有的航班记录和机场信息（包含经纬度坐标）。
2.  **识别往返航线组**：遍历所有航班，将具有相同起飞机场和降落机场的航班归为一组。例如，`北京->上海` 的所有航班属于一组，`上海->北京` 的所有航班属于另一组。
3.  **定义航线方向**：
    *   为每一条航线（不是每一次飞行）定义一个 `direction` 属性（`'outgoing'` 或 `'returning'`）。
    *   实现一个函数 `getDirection(departureAirport, arrivalAirport)`，该函数根据 PRD 中的规则（优先比较纬度，其次比较经度）返回航线的方向。
4.  **计算航线曲率**：
    *   对于每一个航线组（如 `北京->上海` 组），根据航班的飞行次数来确定每一条具体航线的曲率。
    *   可以为每一次飞行增加一个 `curvature` 属性。例如，第一次飞行的曲率是 `C`，第二次是 `2*C`，第三次是 `3*C`。
    *   去程航线的曲率 `C` 为正，返程航线的曲率 `-C` 为负。

**任务二：地图渲染 - 绘制贝塞尔曲线**

1.  **获取地图组件**：定位到项目中用于绘制地图的组件（根据目录结构，很可能是 `src/components/FlightMap.tsx`）。
2.  **修改航线绘制逻辑**：
    *   当前的绘制逻辑很可能是两点之间的直线。
    *   需要修改为使用贝塞尔曲线来绘制。大部分地图库（如 Leaflet, Mapbox）都支持直接绘制贝XEL曲线，或者通过计算曲线上的多个点来模拟。
    *   绘制函数需要接收起点、终点和**曲率**作为参数。
3.  **应用颜色和样式**：
    *   根据航线的 `direction` 属性来决定颜色：去程为红色，返程为蓝色。

### 总结

这个 PRD 的核心在于**数据预处理**。在渲染地图之前，我们需要对所有的航班数据进行一次彻底的分析和整理，为每一条航线打上明确的“方向”、“颜色”和“曲率”标签。然后，渲染层只需要根据这些标签来绘制即可。